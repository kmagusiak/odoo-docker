#!/usr/bin/env python3

import odoo.cli  # import first to patch the environment

import datetime
import os
import sys

__doc__ = """Runs odoo tests for all modules found in a given path.
The database is re-created first with some pre-installed modules.
"""

# get addons script
sys.path.append('/usr/local/bin')
get_modules = __import__('odoo-getaddons').get_modules


def print_time(msg):
    print(f"TEST - {msg} {datetime.datetime.now().isoformat(' ')}")


def run_command(function, args):
    args = ["'" + a.replace('"', '\"') + "'" for a in args]
    command = " ".join([function] + args)
    result_code = os.system(command)
    if result_code:
        raise RuntimeError('%s failed (%d)' % (function, result_code))


def create_database(dbname, modules=[], template=None):
    print(f"TEST - Drop database: {dbname}")
    run_command('click-odoo-dropdb', ["--if-exists", dbname])
    if template:
        print(f"TEST - Start from template database: {template}")
        run_command('click-odoo-copydb', [template, dbname])
        return
    print(f"TEST - Initialize database: {dbname}")
    modules = ['base'] + [m for m in modules if m not in ('', 'base')]
    base_modules = ','.join(modules)
    if len(modules) > 1:
        print(f"TEST - Pre-install module: {base_modules}")
    run_command(
        'click-odoo-initdb',
        ["--new-database", dbname, "--demo", "--no-cache", "-m", base_modules],
    )


def parse_args(args):
    import argparse

    dbname = os.environ.get('PGDATABASE_TEST')
    parser = argparse.ArgumentParser(description=__doc__)
    parser.add_argument(
        '-d',
        '--database',
        metavar='database',
        help='The database (required; env PGDATABASE_TEST)',
        default=dbname,
        required=not dbname,
    )
    parser.add_argument(
        '--template',
        '--from-template',
        metavar='template',
        help="Use the database template",
    )
    parser.add_argument('-a', '--addons', help='The addons to test')
    parser.add_argument(
        '--get-addons',
        metavar='path',
        help="The directory to scan for addons",
    )
    parser.add_argument(
        '-b',
        '--base-addons',
        help="The addons installed during initdb (env BASE_MODULES)",
    )
    parser.add_argument(
        '-t',
        '--test-enable',
        help="Enable testing",
        action='store_true',
    )
    arg, args = parser.parse_known_args(args)
    addons = (arg.addons or '').split(',')
    if arg.get_addons:
        addons += get_modules(arg.get_addons, depth=3)
    base_addons = (arg.base_addons or os.environ.get('BASE_MODULES') or '').split(',')
    if args[:1] == ['--']:
        args = args[1:]
    if arg.test_enable:
        args = ['--test-enable'] + args
    return {
        'dbname': arg.database,
        'template': arg.template,
        'addons': [a for a in set(addons) if a],
        'base_addons': base_addons,
        'odoo_args': args,
    }


def main(args=None):
    if args is None:
        args = sys.argv[1:]
    arg = parse_args(args)
    dbname = arg['dbname']
    addons = arg['addons']
    base_addons = arg['base_addons']

    if not dbname:
        print("TEST - Missing database name")
        sys.exit(1)
    if not addons:
        print("TEST - No modules to test")
        sys.exit(1)

    # create db with base modules
    print_time('Start')
    print(f"Modules ({len(addons)}): {','.join(addons)}")
    create_database(dbname, base_addons, template=arg.get('template'))
    # update arguments and run odoo
    print_time('Start Test')
    args = [
        "odoo-bin",
        "--stop-after-init",
        *arg['odoo_args'],
        "-d",
        dbname,
        "-i",
        ','.join(addons),
    ]
    sys.argv = args
    odoo.cli.main()
    print_time('Done')


if __name__ == "__main__":
    main()
